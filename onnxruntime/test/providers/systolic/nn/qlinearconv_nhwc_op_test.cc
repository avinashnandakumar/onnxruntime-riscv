// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

#include "gtest/gtest.h"
#include "test/providers/provider_test_utils.h"

namespace onnxruntime {
namespace test {

TEST(ConvTest, QLinearConvNHWCSignedTiny2DTest) {
  OpTester test("QLinearConv_nhwc", 10);

  std::vector<int8_t> X = {110, 35, 111, 107, 5, 79, 103, 5, 12, 123, 34, 40, 41, 102, 33, 117, 109, 73, 51, 123, 6, 126, 56, 111, 111, \
                          1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5};
  std::vector<int64_t> X_shape = {1, 5, 5, 2};

  std::vector<int8_t> W = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \ 
                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
  std::vector<int64_t> W_shape = {1, 4, 4, 2};

  std::vector<int8_t> expected_vals = {10, 9, 9, 10, \
                                        10, 9, 9, 10 };
  std::vector<int64_t> Y_shape = {1, 2, 2, 2};

  //test.AddInput<int64_t>("conv_attrs_.group", 2);
  
  test.AddInput<int8_t>("x", X_shape, X);
  test.AddInput<float>("x_scale", {}, {1});
  test.AddInput<int8_t>("x_zero_point", {}, {0});

  test.AddInput<int8_t>("w", W_shape, W);
  test.AddInput<float>("w_scale", {}, {1});
  test.AddInput<int8_t>("w_zero_point", {}, {0});

  test.AddInput<float>("y_scale", {}, {64});
  test.AddInput<int8_t>("y_zero_point", {}, {0});

  test.AddInput<int32_t>("B", {1}, {100});

  test.AddOutput<int8_t>("y", Y_shape, expected_vals);

  SessionOptions session_options;
  session_options.intra_op_param.thread_pool_size = 1;
  test.Run(session_options);
}

TEST(ConvTest, QLinearConvNHWCHwacha) {
  OpTester test("QLinearConv_nhwc", 10);

  std::vector<int8_t> X = {
        
         51, 	40, 	46, 	54, 	63, 	63, 	63, 	63, \	
         77, 	68, 	74, 	71, 	71, 	71, 	71, 	71, \	
         77, 	74, 	68, 	71, 	71, 	71, 	71, 	71, \	
         51, 	48, 	43, 	63, 	74, 	71, 	71, 	71, \	
    
    
    };

          
  std::vector<int64_t> X_shape = {1, 4, 8, 1};

  std::vector<int8_t> W = { 3, 14, 3, \
                            -6, -24, -4, \
                            -1, -3, 1
                          };
  std::vector<int64_t> W_shape = {1, 3, 3, 1};

  std::vector<int8_t> expected_vals = {10, 9, 9, 10, 10, 10, 0, 0,\
                                        10, 9, 9, 10, 10, 10, 0, 0, \
                                        10, 9, 9, 10, 10, 10, 0, 0, \
                                        10, 9, 9, 10, 10, 10, 0, 0 };
  std::vector<int64_t> Y_shape = {1, 4, 8, 1};

  //test.AddInput<int64_t>("conv_attrs_.group", 2);
  
  test.AddInput<int8_t>("x", X_shape, X);
  test.AddInput<float>("x_scale", {}, {1});
  test.AddInput<int8_t>("x_zero_point", {}, {0});

  test.AddInput<int8_t>("w", W_shape, W);
  test.AddInput<float>("w_scale", {}, {1});
  test.AddInput<int8_t>("w_zero_point", {}, {0});

  test.AddInput<float>("y_scale", {}, {64});
  test.AddInput<int8_t>("y_zero_point", {}, {0});

  test.AddInput<int32_t>("B", {1}, {100});

  test.AddOutput<int8_t>("y", Y_shape, expected_vals);

  SessionOptions session_options;
  session_options.intra_op_param.thread_pool_size = 1;
  test.Run(session_options);


}

TEST(ConvTest, QLinearConvMobilenet) {
  OpTester test("QLinearConv_nhwc", 10);

  std::vector<int8_t> X = {
          51,	40,	46,	54,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	43,	68,	40,	54,	60,	54,	34,	40,	48,	51,	57,	51,	46,	37,	37,	43,	66,	60,	66,	51,	60,	60,	60,	63,	63,	57,	54,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	60,	60,	60,	60,	63,	60,	57,	60,	63,	60,	28,	37,	37,	37,	37,	34,	46,	66,	46,	66,	60,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	51,	60,	60,	\ 
          77,	68,	74,	71,	71,	71,	71,	71,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	71,	60,	54,	57,	77,	77,	63,	48,	51,	54,	57,	60,	57,	48,	60,	51,	54,	54,	80,	60,	68,	71,	74,	74,	57,	66,	74,	71,	71,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	71,	74,	71,	63,	74,	74,	71,	37,	37,	46,	48,	46,	46,	68,	46,	51,	51,	68,	74,	74,	74,	71,	71,	71,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	68,	63,	68,	74,	\ 
          77,	74,	68,	71,	71,	71,	71,	71,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	71,	71,	63,	77,	68,	77,	57,	51,	54,	54,	51,	54,	57,	46,	51,	57,	48,	40,	60,	80,	68,	74,	74,	71,	71,	71,	74,	71,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	71,	71,	71,	71,	74,	57,	68,	68,	25,	37,	37,	43,	54,	54,	48,	37,	51,	66,	66,	71,	71,	74,	71,	71,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	68,	66,	63,	74,	\ 
          51,	48,	43,	63,	74,	71,	71,	71,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	68,	74,	71,	77,	77,	68,	48,	43,	51,	60,	60,	46,	54,	66,	68,	63,	68,	46,	60,	74,	77,	74,	74,	71,	71,	74,	74,	71,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	68,	71,	60,	46,	25,	28,	34,	28,	25,	25,	31,	34,	37,	43,	43,	51,	68,	51,	74,	71,	74,	71,	71,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	71,	68,	63,	74,	\ 
          34,	25,	25,	54,	74,	71,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	77,	51,	51,	51,	68,	57,	51,	40,	43,	43,	48,	57,	60,	54,	54,	57,	68,	60,	51,	77,	68,	71,	71,	71,	74,	71,	74,	74,	74,	71,	68,	68,	60,	57,	51,	48,	48,	40,	34,	31,	23,	14,	11,	3,	0,	0,	0,	3,	11,	17,	25,	31,	34,	34,	43,	46,	23,	34,	54,	71,	71,	71,	74,	74,	74,	74,	74,	74,	74,	71,	71,	74,	71,	71,	71,	66,	66,	71,	74,	71,	74,	74,	74,	74,	71,	66,	63,	71,	\ 
          40,	28,	28,	54,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	77,	60,	37,	43,	66,	68,	57,	48,	43,	37,	34,	60,	68,	51,	40,	54,	54,	57,	46,	68,	71,	68,	71,	66,	74,	68,	60,	48,	28,	23,	20,	20,	11,	8,	8,	8,	5,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	5,	11,	23,	20,	11,	3,	8,	31,	60,	68,	71,	71,	71,	71,	74,	71,	71,	74,	71,	71,	71,	66,	77,	54,	60,	31,	71,	74,	71,	74,	74,	74,	74,	74,	54,	66,	74,	\ 
          40,	28,	37,	54,	77,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	68,	48,	71,	68,	51,	63,	54,	68,	66,	40,	37,	48,	48,	51,	48,	48,	57,	54,	43,	68,	66,	68,	60,	43,	25,	14,	5,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	5,	5,	3,	0,	0,	0,	5,	17,	46,	68,	66,	71,	68,	71,	74,	71,	74,	71,	71,	71,	63,	71,	20,	54,	71,	71,	71,	74,	74,	74,	74,	74,	71,	57,	68,	74,	\ 
          43,	28,	43,	54,	77,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	71,	68,	71,	74,	66,	54,	43,	51,	60,	57,	51,	43,	46,	46,	51,	51,	46,	48,	37,	43,	31,	11,	5,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	3,	0,	0,	0,	0,	0,	0,	11,	31,	46,	60,	68,	71,	74,	74,	74,	74,	71,	71,	68,	48,	43,	66,	68,	74,	71,	68,	74,	74,	77,	74,	71,	66,	71,	74,	\ 
          43,	34,	48,	54,	74,	74,	71,	71,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	77,	68,	71,	71,	74,	68,	57,	71,	71,	80,	66,	60,	60,	57,	57,	48,	54,	43,	43,	40,	31,	14,	11,	11,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	8,	48,	74,	71,	74,	63,	74,	71,	63,	66,	43,	68,	51,	54,	71,	68,	48,	66,	74,	71,	71,	71,	46,	60,	71,	\ 
          46,	37,	48,	54,	74,	74,	71,	71,	74,	74,	74,	74,	74,	74,	74,	74,	77,	74,	74,	74,	71,	71,	68,	63,	60,	48,	71,	68,	66,	54,	60,	60,	60,	57,	60,	46,	31,	20,	14,	8,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	17,	43,	63,	71,	71,	63,	57,	40,	66,	46,	74,	51,	37,	54,	34,	31,	48,	37,	60,	71,	68,	37,	68,	71,	\ 
          51,	37,	48,	51,	74,	74,	71,	71,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	71,	74,	77,	74,	63,	68,	63,	54,	71,	46,	68,	46,	54,	43,	37,	23,	11,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	20,	46,	60,	71,	63,	68,	40,	66,	66,	43,	34,	34,	20,	25,	31,	28,	66,	60,	71,	60,	66,	68,	\ 
          54,	40,	48,	48,	74,	74,	71,	71,	74,	74,	74,	74,	74,	74,	74,	74,	74,	77,	74,	74,	66,	74,	74,	77,	80,	68,	60,	57,	77,	46,	51,	48,	34,	23,	8,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	8,	25,	60,	34,	40,	28,	46,	40,	34,	28,	34,	31,	28,	28,	28,	46,	77,	74,	68,	71,	74,	\ 
          60,	51,	46,	51,	71,	74,	71,	71,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	74,	71,	74,	74,	68,	54,	66,	57,	54,	54,	46,	43,	31,	28,	8,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	3,	20,	17,	25,	31,	28,	25,	28,	31,	23,	34,	34,	28,	63,	63,	77,	71,	57,	74,	66,	\ 
          60,	48,	48,	48,	71,	74,	71,	71,	74,	74,	74,	74,	74,	74,	74,	74,	71,	74,	74,	74,	71,	71,	63,	40,	63,	74,	66,	46,	51,	54,	23,	14,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	11,	31,	25,	23,	20,	23,	28,	28,	31,	43,	34,	60,	71,	68,	48,	63,	63,	71,	\ 
          60,	51,	48,	51,	71,	74,	71,	71,	74,	74,	74,	74,	74,	74,	74,	74,	71,	74,	74,	71,	71,	74,	68,	48,	57,	66,	71,	46,	51,	34,	17,	3,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	11,	8,	11,	20,	25,	25,	25,	34,	34,	46,	40,	31,	28,	34,	43,	74 
              
    };

          
  std::vector<int64_t> X_shape = {1, 15, 112, 1};
  
  std::vector<int8_t> W = { 3, 14, 3, \
                            -6, -24, -4, \
                            -1, -3, 1
                          };
  // std::vector<int8_t> W = { 3, -6, 	9,	\ 
  //                           2, -2, 	-59,	\ 
  //                           0,	-3,	0	\
  //                         };
  std::vector<int64_t> W_shape = {1, 3, 3, 1};

  std::vector<int8_t> expected_vals = {
                                      51,	40,	46,	54,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	43,	68,	40,	54,	60,	54,	34,	40,	48,	51,	57,	51,	46,	37,	37,	43,	66,	60,	66,	51,	60,	60,	60,	63,	63,	57,	54,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	60,	60,	60,	60,	63,	60,	57,	60,	63,	60,	28,	37,	37,	37,	37,	34,	46,	66,	46,	66,	60,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	51,	60,	60,	\ 
                                      51,	40,	46,	54,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	43,	68,	40,	54,	60,	54,	34,	40,	48,	51,	57,	51,	46,	37,	37,	43,	66,	60,	66,	51,	60,	60,	60,	63,	63,	57,	54,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	60,	60,	60,	60,	63,	60,	57,	60,	63,	60,	28,	37,	37,	37,	37,	34,	46,	66,	46,	66,	60,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	51,	60,	60,	\ 
                                      51,	40,	46,	54,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	43,	68,	40,	54,	60,	54,	34,	40,	48,	51,	57,	51,	46,	37,	37,	43,	66,	60,	66,	51,	60,	60,	60,	63,	63,	57,	54,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	60,	60,	60,	60,	63,	60,	57,	60,	63,	60,	28,	37,	37,	37,	37,	34,	46,	66,	46,	66,	60,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	51,	60,	60,	\ 
                                      51,	40,	46,	54,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	43,	68,	40,	54,	60,	54,	34,	40,	48,	51,	57,	51,	46,	37,	37,	43,	66,	60,	66,	51,	60,	60,	60,	63,	63,	57,	54,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	60,	60,	60,	60,	63,	60,	57,	60,	63,	60,	28,	37,	37,	37,	37,	34,	46,	66,	46,	66,	60,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	51,	60,	60,	\ 
                                      51,	40,	46,	54,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	43,	68,	40,	54,	60,	54,	34,	40,	48,	51,	57,	51,	46,	37,	37,	43,	66,	60,	66,	51,	60,	60,	60,	63,	63,	57,	54,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	60,	60,	60,	60,	63,	60,	57,	60,	63,	60,	28,	37,	37,	37,	37,	34,	46,	66,	46,	66,	60,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	51,	60,	60,	\
                                      51,	40,	46,	54,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	43,	68,	40,	54,	60,	54,	34,	40,	48,	51,	57,	51,	46,	37,	37,	43,	66,	60,	66,	51,	60,	60,	60,	63,	63,	57,	54,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	60,	60,	60,	60,	63,	60,	57,	60,	63,	60,	28,	37,	37,	37,	37,	34,	46,	66,	46,	66,	60,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	51,	60,	60,	\ 
                                      51,	40,	46,	54,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	43,	68,	40,	54,	60,	54,	34,	40,	48,	51,	57,	51,	46,	37,	37,	43,	66,	60,	66,	51,	60,	60,	60,	63,	63,	57,	54,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	60,	60,	60,	60,	63,	60,	57,	60,	63,	60,	28,	37,	37,	37,	37,	34,	46,	66,	46,	66,	60,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	51,	60,	60,	\ 
                                      51,	40,	46,	54,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	43,	68,	40,	54,	60,	54,	34,	40,	48,	51,	57,	51,	46,	37,	37,	43,	66,	60,	66,	51,	60,	60,	60,	63,	63,	57,	54,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	60,	60,	60,	60,	63,	60,	57,	60,	63,	60,	28,	37,	37,	37,	37,	34,	46,	66,	46,	66,	60,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	51,	60,	60,	\ 
                                      51,	40,	46,	54,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	43,	68,	40,	54,	60,	54,	34,	40,	48,	51,	57,	51,	46,	37,	37,	43,	66,	60,	66,	51,	60,	60,	60,	63,	63,	57,	54,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	60,	60,	60,	60,	63,	60,	57,	60,	63,	60,	28,	37,	37,	37,	37,	34,	46,	66,	46,	66,	60,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	51,	60,	60,	\ 
                                      51,	40,	46,	54,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	43,	68,	40,	54,	60,	54,	34,	40,	48,	51,	57,	51,	46,	37,	37,	43,	66,	60,	66,	51,	60,	60,	60,	63,	63,	57,	54,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	60,	60,	60,	60,	63,	60,	57,	60,	63,	60,	28,	37,	37,	37,	37,	34,	46,	66,	46,	66,	60,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	51,	60,	60,	\
                                      51,	40,	46,	54,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	43,	68,	40,	54,	60,	54,	34,	40,	48,	51,	57,	51,	46,	37,	37,	43,	66,	60,	66,	51,	60,	60,	60,	63,	63,	57,	54,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	60,	60,	60,	60,	63,	60,	57,	60,	63,	60,	28,	37,	37,	37,	37,	34,	46,	66,	46,	66,	60,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	51,	60,	60,	\ 
                                      51,	40,	46,	54,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	43,	68,	40,	54,	60,	54,	34,	40,	48,	51,	57,	51,	46,	37,	37,	43,	66,	60,	66,	51,	60,	60,	60,	63,	63,	57,	54,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	60,	60,	60,	60,	63,	60,	57,	60,	63,	60,	28,	37,	37,	37,	37,	34,	46,	66,	46,	66,	60,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	51,	60,	60,	\ 
                                      51,	40,	46,	54,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	43,	68,	40,	54,	60,	54,	34,	40,	48,	51,	57,	51,	46,	37,	37,	43,	66,	60,	66,	51,	60,	60,	60,	63,	63,	57,	54,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	60,	60,	60,	60,	63,	60,	57,	60,	63,	60,	28,	37,	37,	37,	37,	34,	46,	66,	46,	66,	60,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	51,	60,	60,	\ 
                                      51,	40,	46,	54,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	43,	68,	40,	54,	60,	54,	34,	40,	48,	51,	57,	51,	46,	37,	37,	43,	66,	60,	66,	51,	60,	60,	60,	63,	63,	57,	54,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	60,	60,	60,	60,	63,	60,	57,	60,	63,	60,	28,	37,	37,	37,	37,	34,	46,	66,	46,	66,	60,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	51,	60,	60,	\ 
                                      51,	40,	46,	54,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	43,	68,	40,	54,	60,	54,	34,	40,	48,	51,	57,	51,	46,	37,	37,	43,	66,	60,	66,	51,	60,	60,	60,	63,	63,	57,	54,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	60,	60,	60,	60,	63,	60,	57,	60,	63,	60,	28,	37,	37,	37,	37,	34,	46,	66,	46,	66,	60,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	63,	60,	60,	51,	60,	60                                       
                                        };
  std::vector<int64_t> Y_shape = {1, 15, 112, 1};

  //test.AddInput<int64_t>("conv_attrs_.group", 2);
  
  test.AddInput<int8_t>("x", X_shape, X);
  test.AddInput<float>("x_scale", {}, {1});
  test.AddInput<int8_t>("x_zero_point", {}, {0});

  test.AddInput<int8_t>("w", W_shape, W);
  test.AddInput<float>("w_scale", {}, {1});
  test.AddInput<int8_t>("w_zero_point", {}, {0});

  test.AddInput<float>("y_scale", {}, {64});
  test.AddInput<int8_t>("y_zero_point", {}, {0});

  test.AddInput<int32_t>("B", {1}, {100});

  test.AddOutput<int8_t>("y", Y_shape, expected_vals);

  SessionOptions session_options;
  session_options.intra_op_param.thread_pool_size = 1;
  test.Run(session_options);


}

}  // namespace test
}  // namespace onnxruntime
